#lang sicp
(define (even? n)
  (= (remainder n 2) 0))
(define (square n)
  (* n n))
(define (exp num step)
  (cond ((= step 0) 1)
      ((even? step) (square (exp num (/ step 2))))
      (else (* num (exp num (- step 1))))))
(define (fast-expt-iter a b n)
  (cond ((= n 0)
         a)
        ((even? n)
         (fast-expt-iter a (* b b) (/ n 2)))
        (else
         (fast-expt-iter (* a b) b (- n 1)))))